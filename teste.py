"""
Teste B√°sico da PocketOption API
Autor: AdminhuDev
Vers√£o: 1.0.0
Data: 2024
"""

import asyncio
import time
import logging
from pocketoptionapi.stable_api import PocketOption
from loguru import logger

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger.add("logs/teste_{time}.log", rotation="1 day", retention="7 days")

# Configura√ß√£o da sess√£o (EXEMPLO - substitua pelos seus dados reais)
SSID_EXEMPLO = '42["auth",{"session":"lmarivud8uivsahpc3lbl09plk","isDemo":1,"uid":86113915,"platform":3,"isFastHistory":true,"isOptimized":true}]'

async def teste_basico():
    """
    Teste b√°sico da API PocketOption
    """
    print("üöÄ Iniciando teste b√°sico da PocketOption API")
    print("=" * 50)

    try:
        # 1. Inicializa√ß√£o da API
        print("üìã 1. Inicializando API...")
        api = PocketOption(SSID_EXEMPLO)
        print("‚úÖ API inicializada com sucesso")

        # 2. Conex√£o WebSocket
        print("üîó 2. Conectando ao WebSocket...")
        conectado = await api.connect()

        if not conectado:
            print("‚ùå Falha na conex√£o WebSocket")
            print("üí° Verifique seu SSID e conex√£o com internet")
            return

        print("‚úÖ Conectado com sucesso ao WebSocket")

        # 3. Aguardar estabiliza√ß√£o
        print("‚è≥ 3. Aguardando estabiliza√ß√£o da conex√£o...")
        await asyncio.sleep(3)

        # 4. Teste de saldo
        print("üí∞ 4. Testando obten√ß√£o de saldo...")
        try:
            saldo = await api.get_balance()
            if saldo is not None:
                print(f"‚úÖ Saldo obtido: ${saldo:.2f}")
            else:
                print("‚ö†Ô∏è Saldo n√£o dispon√≠vel (pode estar carregando)")
        except Exception as e:
            print(f"‚ùå Erro ao obter saldo: {e}")

        # 5. Aguardar dados de payout
        print("üìä 5. Aguardando dados de payout...")
        await asyncio.sleep(5)

        # 6. Teste de payout
        print("üìà 6. Testando obten√ß√£o de payout...")
        try:
            payout = await api.GetPayout("EURUSD_otc")
            if payout:
                print(f"‚úÖ Payout EURUSD_otc: {payout}%")
            else:
                print("‚ö†Ô∏è Payout n√£o dispon√≠vel")
        except Exception as e:
            print(f"‚ùå Erro ao obter payout: {e}")

        # 7. Teste de candles (dados hist√≥ricos)
        print("üìä 7. Testando obten√ß√£o de candles...")
        try:
            candles = await api.get_candles("EURUSD_otc", 60, count=10)
            if candles and len(candles) > 0:
                print(f"‚úÖ Obtidos {len(candles)} candles")
                print("üìã Primeiras 3 velas:")
                for i, candle in enumerate(candles[:3]):
                    print(f"   {i+1}. {candle['time']} - O:{candle['open']:.5f} C:{candle['close']:.5f}")
            else:
                print("‚ö†Ô∏è Nenhum candle obtido")
        except Exception as e:
            print(f"‚ùå Erro ao obter candles: {e}")

        # 8. Teste de opera√ß√£o
        print("üíπ 8. Teste de opera√ß√£o...")
        
        # Exemplo de opera√ß√£o (descomente para testar)
        """
        print("üéÆ TESTANDO OPERA√á√ÉO")
        try:
            sucesso, order_id = await api.buy(
                amount=1,
                active="EURUSD_otc",
                action="call",
                expirations=60
            )

            if sucesso and order_id:
                print(f"‚úÖ Opera√ß√£o realizada: ID {order_id}")

                # Aguardar resultado
                await asyncio.sleep(65)
                profit, status = await api.check_win(order_id)
                print(f"üìä Resultado: {status} - Profit: ${profit:.2f}")
            else:
                print("‚ùå Falha na opera√ß√£o")
        except Exception as e:
            print(f"‚ùå Erro na opera√ß√£o: {e}")
        """

        # 9. Desconex√£o
        print("üîå 9. Desconectando...")
        await api.disconnect()
        print("‚úÖ Desconectado com sucesso")

    except Exception as e:
        print(f"‚ùå Erro geral no teste: {e}")
        print(f"üîç Detalhes: {str(e)}")

    print("=" * 50)
    print("üèÅ Teste b√°sico conclu√≠do")

def main():
    """
    Fun√ß√£o principal
    """
    print("üéØ PocketOption API - Teste B√°sico")
    print("üí° Este teste verifica as funcionalidades b√°sicas da API")
    print()

    # Verificar se o SSID foi configurado
    if SSID_EXEMPLO == '42["auth",{"session":"sua_session_aqui","isDemo":1,"uid":123456,"platform":2}]':
        print("‚ö†Ô∏è ATEN√á√ÉO: Voc√™ precisa configurar seu SSID real!")
        print("üìù Edite a vari√°vel SSID_EXEMPLO no arquivo teste.py")
        print()
        print("Para obter seu SSID:")
        print("1. Fa√ßa login na PocketOption")
        print("2. Abra DevTools (F12)")
        print("3. V√° para Network > WS")
        print("4. Copie a mensagem que come√ßa com 42[\"auth\"")
        print()
        return

    # Executar teste
    asyncio.run(teste_basico())

if __name__ == "__main__":
    main()
